import streamlit as st
import plotly.graph_objects as go
import pandas as pd
from script.Classes import App_Account

# Initialisation de l'application dans la session Streamlit
if "finances" not in st.session_state:
    st.session_state.finances = App_Account(name="Finances")

finances = st.session_state.finances  # R√©cup√©ration de l'instance stock√©e

# Interface utilisateur
st.title("üí∞ Gestion de Comptes Financiers")

# Section cr√©ation de compte
st.header("üîπ Cr√©ation de compte")
account_name = st.text_input("Nom du compte √† cr√©er")
if st.button("Cr√©er un compte"):
    if account_name:
        finances.create_account(account_name)
        st.success(f"Compte '{account_name}' cr√©√© avec succ√®s!")
    else:
        st.error("Veuillez entrer un nom de compte valide.")

# Affichage des comptes existants
st.header("üìú Comptes existants")
accounts = finances.get_all_accounts()
if accounts:
    selected_account = st.selectbox("S√©lectionnez un compte", accounts)
else:
    selected_account = None
    st.warning("Aucun compte disponible. Cr√©ez-en un d'abord.")

if selected_account:
    # Affichage du solde du compte
    st.subheader(f"üí≥ Solde actuel de {selected_account}")
    balance = finances.get_balance(selected_account)
    st.info(f"üí∞ Solde : {balance} ‚Ç¨")

    # Section d'ajout d'argent
    st.header("‚ûï Ajouter de l'argent")
    add_amount = st.number_input("Montant √† ajouter", min_value=0.0, step=1.0)
    if st.button("Ajouter"):
        finances.add_money(selected_account, add_amount)
        st.success(f"{add_amount} ‚Ç¨ ajout√© au compte {selected_account}.")

    # Section de retrait d'argent
    st.header("‚ûñ Retirer de l'argent")
    remove_amount = st.number_input("Montant √† retirer", min_value=0.0, step=1.0)
    if st.button("Retirer"):
        if remove_amount > balance:
            st.error("Fonds insuffisants!")
        else:
            finances.remove_money(selected_account, remove_amount)
            st.success(f"{remove_amount} ‚Ç¨ retir√© du compte {selected_account}.")

    # Section de transfert d'argent
    st.header("üîÑ Transf√©rer de l'argent")
    target_account = st.selectbox("Choisir un compte destinataire", [acc for acc in accounts if acc != selected_account])
    transfer_amount = st.number_input("Montant √† transf√©rer", min_value=0.0, step=1.0)
    if st.button("Transf√©rer"):
        if transfer_amount > balance:
            st.error("Fonds insuffisants pour ce transfert!")
        else:
            finances.transfer_money(selected_account, target_account, transfer_amount)
            st.success(f"{transfer_amount} ‚Ç¨ transf√©r√© de {selected_account} vers {target_account}.")

    # Affichage de l'√©volution du solde
    st.header("üìà √âvolution du Solde")
    history = finances.get_history(selected_account)
    
    if history is not None and not history.empty:
        history["Cumulative Balance"] = history.apply(lambda row: row["Amount"] if row["Type"] == "Credit" else -row["Amount"], axis=1).cumsum()
        
        fig_balance = go.Figure()
        fig_balance.add_trace(go.Scatter(
            x=history.index,
            y=history["Cumulative Balance"],
            mode="lines+markers",
            name="Solde",
            line=dict(color="blue", width=2)
        ))
        fig_balance.update_layout(
            title=f"√âvolution du Solde - {selected_account}",
            xaxis_title="Transactions",
            yaxis_title="Solde (‚Ç¨)",
            template="plotly_white"
        )
        st.plotly_chart(fig_balance)
    else:
        st.warning("Aucune transaction pour afficher l'√©volution du solde.")

    # Tableau de l'historique des transactions
    st.header("üìã Historique des Transactions")
    if history is not None and not history.empty:
        history["Date"] = pd.to_datetime(history.index).strftime("%Y-%m-%d %H:%M:%S")
        history_display = history[["Type", "Amount", "Date"]].rename(columns={"Type": "Nom", "Amount": "Montant (‚Ç¨)"})
        st.table(history_display)
    else:
        st.warning("Aucune transaction enregistr√©e.")

    # Bouton de suppression de compte
    st.header("üóëÔ∏è Supprimer un compte")
    if st.button("Supprimer ce compte"):
        finances.delete_account(selected_account)
        st.warning(f"Le compte '{selected_account}' a √©t√© supprim√©.")
        st.experimental_rerun()  # Rafra√Æchir l'application apr√®s suppression
